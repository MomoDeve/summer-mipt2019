#include <string>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

vector<int> buildLCP(const string& s, vector<int>& suf)
{
	int n = s.size();
	vector<int> lcp(n), pos(n);
	for (int i = 0; i < n; i++)
	{
		pos[suf[i]] = i;
	}
	int k = 0;
	for (int i = 0; i < n; i++)
	{
		if (k > 0)
		{
			k--;
		}
		if (pos[i] == n - 1)
		{
			lcp[n - 1] = -1;
			k = 0;
		}
		else
		{
			int j = suf[pos[i] + 1];
			while (max(i + k, j + k) < n && s[i + k] == s[j + k])
			{
				k++;
			}
			lcp[pos[i]] = k;
		}
	}
	return lcp;
}

int main()
{
	int N;
	string s;
	cin >> N >> s;
	vector<int> suf(N);
	for (int i = 0; i < N; i++)
	{
		cin >> suf[i];
		suf[i]--;
	}
	auto lcp = buildLCP(s, suf);
	for (int i : lcp)
	{
		if(i != -1)
			cout << i << ' ';
	}
	system("pause");
}
