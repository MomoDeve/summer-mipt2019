#pragma once

#include <vector>
#include <iostream>
#include <exception>
#include <initializer_list>
#include <algorithm>

#ifndef size_t
typedef unsigned int size_t;
#endif

namespace momo
{

	template <typename T>
	class matrix
	{
	private:
		size_t size_x, size_y;
		void create(size_t, size_t);
	public:
		std::vector<std::vector<T> > vec;
		matrix();
		matrix(size_t);
		matrix(size_t, size_t);
		matrix(size_t, size_t, T fill);
		matrix(const matrix<T>&);
		matrix(const std::vector<std::vector<T> >&);
		matrix(std::initializer_list<std::initializer_list<T> >);
		~matrix() = default;
		size_t xsize() const;
		size_t ysize() const;
		matrix<T>& operator=(const matrix<T>&);
		matrix<T>& operator*=(const matrix<T>&);
		matrix<T> operator*(const matrix<T>&) const;
	};

	template<typename T>
	std::ostream& operator<< (std::ostream& out, matrix<T>& src)
	{
		for (size_t i = 0; i < src.xsize(); i++)
		{
			for (size_t j = 0; j < src.ysize(); j++)
			{
				out << src.vec[i][j] << " ";
			}
			out << "\n";
		}
		return out;
	}

	template<typename T>
	std::ostream& operator<<(std::ostream& os, const matrix<T>& M)
	{
		for (size_t i = 0; i < M.xsize(); i++)
		{
			for (size_t j = 0; j < M.ysize(); j++)
			{
				os << M.vec[i][j] << " ";
			}
			os << "\n";
		}
		return os;
	}

	template<typename T>
	void matrix<T>::create(size_t xsize, size_t ysize)
	{
		size_x = xsize;
		size_y = ysize;
		vec.resize(size_x);
		for (size_t i = 0; i < size_x; i++)
		{
			vec[i].resize(size_y, 0);
		}
	}

	template<typename T>
	matrix<T>::matrix()
	{
		size_x = 0;
		size_y = 0;
	}

	template<typename T>
	matrix<T>::matrix(size_t size)
	{
		create(size, size);
	}

	template<typename T>
	matrix<T>::matrix(size_t xsize, size_t ysize)
	{
		create(xsize, ysize);
	}

	template<typename T>
	matrix<T>::matrix(size_t xsize, size_t ysize, T fill)
		: size_x(xsize), size_y(ysize), vec(xsize, std::vector<T>(ysize, fill))
	{
	}

	template<typename T>
	matrix<T>::matrix(const matrix<T>& src)
	{
		size_x = src.size_x;
		size_y = src.size_y;
		vec = src.vec;
	}

	template<typename T>
	matrix<T>::matrix(const std::vector<std::vector<T> >& src)
	{
		size_x = src.size();
		size_y = src[0].size();
		vec = src;
	}

	template<typename T>
	matrix<T>::matrix(std::initializer_list<std::initializer_list<T> > src)
	{
		for (auto i : src) vec.push_back(i);
		size_x = vec.size();
		size_y = vec[0].size();
	}

	template<typename T>
	size_t matrix<T>::xsize() const
	{
		return size_x;
	}

	template<typename T>
	size_t matrix<T>::ysize() const
	{
		return size_y;
	}

	template<typename T>
	matrix<T>& matrix<T>::operator=(const matrix<T>& src)
	{
		size_x = src.size_x;
		size_y = src.size_y;
		vec = src.vec;
		return *this;
	}

	template<typename T>
	matrix<T>& matrix<T>::operator*=(const matrix<T>& M)
	{
		*this = *this * M;
		return *this;
	}

	long long mod;

	template<typename T>
	matrix<T> matrix<T>::operator*(const matrix<T>& M) const
	{
		if (size_y != M.size_x) return *this;
		matrix<T> res(size_x, M.size_y);
		for (size_t i = 0; i < res.xsize(); i++)
		{
			for (size_t j = 0; j < res.ysize(); j++)
			{
				res.vec[i][j] = 0;
				for (size_t k = 0; k < size_y; k++)
				{
					res.vec[i][j] += vec[i][k] % mod * (M.vec[k][j] % mod) % mod;
					res.vec[i][j] %= mod;
				}
			}
		}
		return res;
	}

	template<typename T>
	matrix<T> pow(matrix<T> M, long long power) {
		if (power == 1)
		{
			return M;
		}
		else if (power == 2)
		{
			return M * M;
		}

		if (power % 2 == 1)
			return pow(M, power - 1) * M;
		else {
			auto TMP = pow(M, power / 2);
			return TMP * TMP;
		}
	}
}

using namespace std;

int main()
{
	momo::mod = 1e9 + 7;
	long long N, M, K, a, b;
	cin >> N >> M >> K;
	momo::matrix<long long> D(N, N);
	for (int i = 0; i < M; i++)
	{
		cin >> a >> b;
		D.vec[a - 1][b - 1]++;
	}

	//cout << D << endl;

	if (K == 0)
	{
		cout << 1;
	}
	else if (M == 0)
	{
		cout << 0;
	}
	else
	{
		long long res = 0;
		auto R = pow(D, K);

		//cout << R << endl;

		momo::matrix<long long> st(1, N);
		st.vec[0][0] = 1;
		auto Res = st * R;
		for (const auto& el : Res.vec[0])
		{
			res = (res + el) % momo::mod;
		}
		cout << res << endl;
	}
	system("pause");
}
